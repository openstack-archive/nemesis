# -*- coding: utf-8 -*-

# Licensed under the Apache License, Version 2.0 (the "License"); you may
# not use this file except in compliance with the License. You may obtain
# a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.

'''
    Alembic environment script as generated by alembic init, modified to
    use the Flask app context and Flask-SQLAlchemy extension rather than
    the traditional raw SQLAlchemy engine.
'''


from __future__ import with_statement
from alembic import context
import configparser
import os
from logging.config import fileConfig
from sqlalchemy import engine_from_config
from sqlalchemy import pool
from python_nemesis.extensions import db


config = context.config
fileConfig(config.config_file_name)
target_metadata = db.metadata
config_file = os.environ.get("NEMESIS_CONFIG",
                             "/etc/nemesis/nemesis.conf")

nem_config = configparser.ConfigParser()
nem_config.readfp(open(config_file))


def run_migrations_offline():
    """Run migrations in 'offline' mode.

    This configures the context with just a URL
    and not an Engine, though an Engine is acceptable
    here as well.  By skipping the Engine creation
    we don't even need a DBAPI to be available.

    Calls to context.execute() here emit the given string to the
    script output.

    """
    url = nem_config.get('sqlalchemy', 'database_uri')
    context.configure(
        url=url, target_metadata=target_metadata, literal_binds=True)

    with context.begin_transaction():
        context.run_migrations()


def run_migrations_online():
    """Run migrations in 'online' mode.

    In this scenario we need to create an Engine
    and associate a connection with the context.

    """
    db_uri = nem_config.get('sqlalchemy', 'database_uri')
    config_dict = {"sqlalchemy.url": db_uri}
    connectable = engine_from_config(config_dict,
                                     prefix='sqlalchemy.',
                                     poolclass=pool.NullPool)

    with connectable.connect() as connection:
        context.configure(
            connection=connection,
            target_metadata=target_metadata
        )

        with context.begin_transaction():
            context.run_migrations()


if context.is_offline_mode():
    run_migrations_offline()
else:
    run_migrations_online()
